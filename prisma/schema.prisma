// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  sites         Site[]
  prompts       Prompt[]
  credits       Int?      @default(20)
  accessToken   String?   @db.LongText
  images        Image[]
  subscription  String?
  isSubscribed  Boolean   @default(false)
  openAIKey     String?   @db.LongText
}

model Account {
  id                       String     @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?    @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?    @db.Text
  session_state            String?
  oauth_token_secret       String?    @db.Text
  oauth_token              String?    @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String    @id @default(cuid())
  title         String?   @db.Text
  description   String?   @db.Text
  content       String?   @db.LongText
  slug          String    @default(cuid())
  isFeatured    Boolean   @default(false)
  image         Image?    @relation(fields: [imageId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  published     Boolean   @default(false)
  category      Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId    String?
  site          Site?     @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId        String?
  imageId       String?
  translations  PostTranslation[]
  links         PostLink[]

  @@unique([id, siteId], name: "post_site_constraint")
  @@unique([id, categoryId], name: "post_category_constraint")
  @@index([siteId, categoryId])
}

model PostLink {
  id         String   @id @default(cuid())
  title      String?
  href       String?  @db.Text
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId     String
}

model PostTranslation {
  id         String   @id @default(cuid())
  title      String?
  content    String?  @db.Text
  lang       String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId     String
}

model Category {
  id            String                @id @default(cuid())
  title         String
  slug          String                @default(cuid())
  content       String?               @db.Text
  image         Image?                @relation(fields: [imageId], references: [id])
  site          Site?                 @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId        String?
  posts         Post[]
  parent        Category?             @relation(name: "categories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId      String?
  children      Category[]            @relation(name: "categories")
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  imageId       String?
  translations  CategoryTranslation[]

  @@unique([id, siteId], name: "category_site_constraint")
}

model CategoryTranslation {
  id          String   @id @default(cuid())
  title       String?
  content     String?  @db.Text
  lang        String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId  String
}

model Site {
  id           String     @id @default(cuid())
  name         String?
  description  String?    @db.Text
  logo         String?
  font         String     @default("font-cal")
  image        Image?     @relation(fields: [imageId], references: [id])
  subdomain    String?    @unique
  customDomain String?    @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User?      @relation(fields: [userId], references: [id])
  userId       String?
  theme        Theme?     @relation(fields: [themeId], references: [id])
  themeId      String?
  posts        Post[]
  categories   Category[]
  prompts      Prompt[]
  imageId      String?
  customCss    String?    @db.LongText
  customJs     String?    @db.LongText
  lang         String     @default("EN")

  @@index([userId])
}

model Image {
  id          String     @id @default(cuid())
  src         String?    @db.Text
  alt         String?    @db.Text
  posts       Post[]
  categories  Category[]
  sites       Site[]
  themes      Theme[]
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model Prompt {
  id            String   @id @default(cuid())
  name          String?
  description   String?  @db.LongText
  command       String?  @db.LongText
  hint          String?  @db.Text
  tested        Boolean?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sites         Site[]
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?

  @@index([userId])
}

model Theme {
  id            String  @id @default(cuid())
  name          String?
  description   String? @db.Text
  url           String?
  image         Image?  @relation(fields: [imageId], references: [id])
  sites         Site[]
  live          Boolean @default(true)
  imageId       String?
}
